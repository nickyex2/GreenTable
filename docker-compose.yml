version: "3.8"

volumes:
  pgdata: 
  kongadata:
  rabbitmq_data:

networks:
  kong-net:
    driver: bridge

services:
  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.6
    platform: linux/amd64
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong:2.0.4
    platform: linux/amd64
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:2.0.4
    platform: linux/amd64
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-migration
      - kong-database
      - rabbitmq
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
  
  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga
    restart: always
    networks:
        - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: password
      DB_DATABASE: konga_db
    depends_on:
      - kong
    ports:
      - "1337:1337"
    volumes:
      - kongadata:/app/kongadata

  #################################################
  # Customer: The Customer microservice
  #################################################
  customer:
    build:
      context: ./
      dockerfile: ./backend/Customer/customer.Dockerfile
    image: nickyex2/customer:latest
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
      CUSTOMER_DB_URL: ${CUSTOMER_DB_URL}
    ports:
    - "5001:5001"
    networks:
      - kong-net
  #################################################
  # Catalog: The Catalog microservice
  #################################################
  catalog:
    build:
      context: ./
      dockerfile: ./backend/Catalog/catalog.Dockerfile
    image: nickyex2/catalog:latest
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
      CATALOG_DB_URL: ${CATALOG_DB_URL}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
    ports:
    - "5002:5002"
    networks:
      - kong-net
  #################################################
  # Booking: The Booking microservice
  #################################################
  booking:
    build:
      context: ./
      dockerfile: ./backend/Booking/booking.Dockerfile
    image: nickyex2/booking:latest
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
      BOOKING_DB_URL: ${BOOKING_DB_URL}
    ports:
    - "5003:5003"
    networks:
      - kong-net
  #################################################
  # WaitList: The WaitList microservice
  #################################################
  waitlist:
    build:
      context: ./
      dockerfile: ./backend/WaitList/waitlist.Dockerfile
    image: nickyex2/waitlist:latest
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
      WAITLIST_DB_URL: ${WAITLIST_DB_URL}
    ports:
    - "5010:5010"
    networks:
      - kong-net
  #################################################
  # Payment: The Payment microservice
  #################################################
  payment:
    build:
      context: ./
      dockerfile: ./backend/Payment/payment.Dockerfile
    image: nickyex2/payment:latest
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
      stripe_url: https://stripe-api:5016/api/stripepay
    # ports:
    #   - "5004:5004"
    expose:
      - "5004"
    networks:
      - kong-net
  #################################################
  # Notification: The Notification microservice
  #################################################
  notification:
    build:
      context: ./
      dockerfile: ./backend/Notification/notification.Dockerfile
    image: nickyex2/notification:latest
    restart: always
    depends_on:
      rabbitmq:
        condition: service_started
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
      telegram_url: https://telegram-send-api:5015
      twilio_url: https://twilio-sendgrid-api:5014
    networks:
      - kong-net

  ###################################
  # Error: The Error microservice
  ###################################
  error:
    build:
      context: ./
      dockerfile: ./backend/Error/error.Dockerfile
    image: nickyex2/error:latest
    restart: always
    depends_on:
      rabbitmq:
        condition: service_started
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
    networks:
      - kong-net

  ###################################################
  # Telegram Send API: The Telegram Send Message API
  ###################################################
  telegram-send-api:
    build:
      context: ./
      dockerfile: ./backend/APIs/telegram_send_api.Dockerfile
    image: nickyex2/telegram-send-api:latest
    restart: always
    depends_on:
      notification:
        condition: service_started
    environment:
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
      TELEGRAM_API_SESSION: ${TELEGRAM_API_SESSION}
      PYTHONUNBUFFERED: 1
    # ports:
    #   - "5015:5015"
    expose:
      - "5015"
    networks:
      - kong-net

  ###################################################
  # Twilio Sendgrid API: The Twilio Email API
  ###################################################
  twilio-sendgrid-api:
    build:
      context: ./
      dockerfile: ./backend/APIs/twilio_sendgrid_api.Dockerfile
    image: nickyex2/twilio-sendgrid-api:latest
    restart: always
    depends_on:
      notification:
        condition: service_started
    environment:
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      PYTHONUNBUFFERED: 1
    # ports:
    #   - "5014:5014"
    expose:
      - "5014"
    networks:
      - kong-net

  ###################################################
  # Stripe API: The Stripe Payment API
  ###################################################
  stripe-api:
    build:
      context: ./
      dockerfile: ./backend/APIs/stripe_api.Dockerfile
    image: nickyex2/stripe-api:latest
    restart: always
    # depends_on:
      # payment:
      #   condition: service_healthy
    environment:
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      PYTHONUNBUFFERED: 1
    # ports:
    #   - "5016:5016"
    expose:
      - "5016"
    networks:
      - kong-net
  ####################################
  # RabbitMQ: The messaging broker
  ####################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - kong-net
  #################################################
  # START OF COMPLEX MICROSERVICES CONFIGURATION
  #################################################
  ###################################################
  # Cancel Booking API: The Complex Microservice API
  ###################################################
  cancel-booking:
    build:
      context: ./
      dockerfile: ./backend/cancel_booking.Dockerfile
    image: nickyex2/cancel-booking:latest
    restart: always
    depends_on:
      rabbitmq:
        condition: service_started
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      booking_url: https://booking:5003/booking
      catalog_url: https://catalog:5002/catalog
      PYTHONUNBUFFERED: 1
    ports:
      - "5005:5005"
    networks:
      - kong-net
  ####################################################
  # Notify Customer API: The Complex microservice API
  ####################################################
  notify-customer:
    build:
      context: ./
      dockerfile: ./backend/notify_customer.Dockerfile
    image: nickyex2/notify-customer:latest
    restart: always
    depends_on:
      rabbitmq:
        condition: service_started
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      waitlist_url: https://waitlist:5010/waitlist
      PYTHONUNBUFFERED: 1
    networks:
      - kong-net
  ###################################################
  # Make Payment: The Complex Microservice API
  ###################################################
  make-payment:
    build:
      context: ./
      dockerfile: ./backend/make_payment.Dockerfile
    image: nickyex2/make-payment:latest
    restart: always
    depends_on:
      rabbitmq:
        condition: service_started
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      payment_url: https://payment:5004/payment
      booking_url: https://booking:5003/booking
      customer_url: https://customer:5001/customer
      PYTHONUNBUFFERED: 1
    ports:
      - "5007:5007"
    networks:
      - kong-net
  ####################################################
  # Place Booking API: The Complex microservice API
  ####################################################
  place-booking:
    build:
      context: ./
      dockerfile: ./backend/place_booking.Dockerfile
    image: nickyex2/place-booking:latest
    restart: always
    depends_on:
      rabbitmq:
        condition: service_started
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      waitlist_url: https://waitlist:5010/waitlist
      booking_url: https://booking:5003/booking
      catalog_url: https://catalog:5002/catalog
      customer_url: https://customer:5001/customer
      PYTHONUNBUFFERED: 1
    ports:
      - "5006:5006"
    networks:
      - kong-net